{"ast":null,"code":"var _jsxFileName = \"/Users/eunji/Desktop/\\u110B\\u1173\\u11AB\\u110C\\u1175/Test2/test2/src/pages/PostWrite.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import {Grid, Text, Button, Image, Input} from \"../elements\";\n// import Upload from \"../shared/Upload\";\n// import {useSelector, useDispatch} from \"react-redux\";\n// const PostWrite = (props) => {\n//   const is_login = useSelector((state) => state.user.is_login);\n//   const {history} = props;\n//   const [url, setUrl] = React.useState(\"\");\n// const summit = () => {\n//   if(url === \"\"){\n//     window.alert(\"링크를 첨부해 주세요!\");\n//     return;\n//   }\n//   window.alert(\"저장 성공!\");\n// };\n//   if(!is_login){\n//     return (\n//       <Grid margin=\"100px 0px\" padding=\"16px\" center>\n//         <Text size=\"32px\" bold>\n//           앗! 잠깐!\n//         </Text>\n//         <Text size=\"16px\">\n//           로그인 후에만 글을 쓸 수 있어요!\n//         </Text>\n//         <Button\n//           _onClick={() => {\n//             history.replace(\"/login\");\n//           }}\n//         >\n//           로그인 하러가기\n//         </Button>\n//       </Grid>\n//     );\n//   }\n//     return (\n//       <React.Fragment>\n//         <Grid padding=\"16px\">\n//           <Text margin=\"0px\" size=\"36px\" bold>\n//             자료 추가하기\n//           </Text>\n//           <Upload/>\n//         </Grid>\n//         <Grid padding=\"16px\">\n//           <Input\n//             label=\"링크 첨부\" placeholder=\"url을 첨부해 주세요\"\n//             _onChange={(e) => {\n//               setUrl(e.target.value);\n//             }}\n//           />\n//         </Grid>\n//         <Grid padding=\"16px\" center>\n//           <Button is_center text=\"업로드 하기\"\n//           _onClick={() => {\n//             console.log(\"업로드 했어!\");\n//             summit();\n//           }}\n//         ></Button>\n//         </Grid>\n//       </React.Fragment>\n//     );\n// }\n// export default PostWrite;\n// import { useRef, useState } from \"react\";\n// const PostWrite = ({ onCreate }) => {\n//   const authorInput = useRef();\n//   const contentInput = useRef();\n//   const [state, setState] = useState({\n//     author: \"\",\n//     summary: \"\"\n//   });\n//   const handleChangeState = (e) => {\n//     setState({\n//       ...state,\n//       [e.target.name]: e.target.value\n//     });\n//   };\n//   const handleSubmit = () => {\n//     if (state.author.length < 1) {\n//       authorInput.current.focus();\n//       return;\n//     }\n//     if (state.summary.length < 5) {\n//       contentInput.current.focus();\n//       return;\n//     }\n//     onCreate(state.author, state.summary);\n//     alert(\"저장 성공\");\n//     setState({\n//       author: \"\",\n//       summary: \"\"\n//     });\n//   };\n//   return (\n//     <div className=\"DiaryEditor\">\n//       <h2>자료 저장하기</h2>\n//       <div>\n//         <input\n//           ref={authorInput}\n//           value={state.author}\n//           onChange={handleChangeState}\n//           name=\"author\"\n//           placeholder=\"작성자\"\n//           type=\"text\"\n//         />\n//       </div>\n//       <div>\n//         <input\n//           ref={contentInput}\n//           value={state.summary}\n//           onChange={handleChangeState}\n//           name=\"summary\"\n//           placeholder=\"url\"\n//           type=\"text\"\n//         />\n//       </div>\n//       <div>\n//         <button onClick={handleSubmit}>자료 저장하기</button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default PostWrite;\nimport { useRef, useState } from \"react\"; // import \"./App.css\";\n\nimport Table from \"../shared/Table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostWrite = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n\n  const onCreate = (author, summary) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      summary,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n\n  const onRemove = targetId => {\n    const newDiaryList = data.filter(it => it.id !== targetId);\n    setData(newDiaryList);\n  };\n\n  const onEdit = (targetId, newSummary) => {\n    setData(data.map(it => it.id === targetId ? { ...it,\n      summary: newSummary\n    } : it));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Data\",\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostWrite, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n\n_c = PostWrite;\nexport default PostWrite;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostWrite\");","map":{"version":3,"names":["useRef","useState","Table","PostWrite","data","setData","dataId","onCreate","author","summary","created_date","Date","getTime","newItem","id","current","onRemove","targetId","newDiaryList","filter","it","onEdit","newSummary","map"],"sources":["/Users/eunji/Desktop/은지/Test2/test2/src/pages/PostWrite.js"],"sourcesContent":["// import React from \"react\";\n// import {Grid, Text, Button, Image, Input} from \"../elements\";\n// import Upload from \"../shared/Upload\";\n\n// import {useSelector, useDispatch} from \"react-redux\";\n\n// const PostWrite = (props) => {\n//   const is_login = useSelector((state) => state.user.is_login);\n//   const {history} = props;\n//   const [url, setUrl] = React.useState(\"\");\n\n// const summit = () => {\n    \n//   if(url === \"\"){\n//     window.alert(\"링크를 첨부해 주세요!\");\n//     return;\n//   }\n\n//   window.alert(\"저장 성공!\");\n\n// };\n\n//   if(!is_login){\n//     return (\n//       <Grid margin=\"100px 0px\" padding=\"16px\" center>\n//         <Text size=\"32px\" bold>\n//           앗! 잠깐!\n//         </Text>\n//         <Text size=\"16px\">\n//           로그인 후에만 글을 쓸 수 있어요!\n//         </Text>\n//         <Button\n//           _onClick={() => {\n//             history.replace(\"/login\");\n//           }}\n//         >\n//           로그인 하러가기\n//         </Button>\n//       </Grid>\n//     );\n//   }\n\n//     return (\n//       <React.Fragment>\n//         <Grid padding=\"16px\">\n//           <Text margin=\"0px\" size=\"36px\" bold>\n//             자료 추가하기\n//           </Text>\n//           <Upload/>\n//         </Grid>\n\n//         <Grid padding=\"16px\">\n//           <Input\n//             label=\"링크 첨부\" placeholder=\"url을 첨부해 주세요\"\n//             _onChange={(e) => {\n//               setUrl(e.target.value);\n//             }}\n//           />\n//         </Grid>\n\n//         <Grid padding=\"16px\" center>\n//           <Button is_center text=\"업로드 하기\"\n//           _onClick={() => {\n//             console.log(\"업로드 했어!\");\n//             summit();\n//           }}\n//         ></Button>\n//         </Grid>\n//       </React.Fragment>\n//     );\n// }\n\n// export default PostWrite;\n\n\n// import { useRef, useState } from \"react\";\n\n// const PostWrite = ({ onCreate }) => {\n//   const authorInput = useRef();\n//   const contentInput = useRef();\n\n//   const [state, setState] = useState({\n//     author: \"\",\n//     summary: \"\"\n//   });\n\n//   const handleChangeState = (e) => {\n//     setState({\n//       ...state,\n//       [e.target.name]: e.target.value\n//     });\n//   };\n\n//   const handleSubmit = () => {\n//     if (state.author.length < 1) {\n//       authorInput.current.focus();\n//       return;\n//     }\n\n//     if (state.summary.length < 5) {\n//       contentInput.current.focus();\n//       return;\n//     }\n\n//     onCreate(state.author, state.summary);\n//     alert(\"저장 성공\");\n//     setState({\n//       author: \"\",\n//       summary: \"\"\n//     });\n//   };\n\n//   return (\n//     <div className=\"DiaryEditor\">\n//       <h2>자료 저장하기</h2>\n//       <div>\n//         <input\n//           ref={authorInput}\n//           value={state.author}\n//           onChange={handleChangeState}\n//           name=\"author\"\n//           placeholder=\"작성자\"\n//           type=\"text\"\n//         />\n//       </div>\n//       <div>\n//         <input\n//           ref={contentInput}\n//           value={state.summary}\n//           onChange={handleChangeState}\n//           name=\"summary\"\n//           placeholder=\"url\"\n//           type=\"text\"\n//         />\n//       </div>\n      \n//       <div>\n//         <button onClick={handleSubmit}>자료 저장하기</button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default PostWrite;\n\n\nimport { useRef, useState } from \"react\";\n// import \"./App.css\";\nimport Table from \"../shared/Table\";\n\nconst PostWrite = () => {\n  const [data, setData] = useState([]);\n\n  const dataId = useRef(0);\n\n  const onCreate = (author, summary) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      summary,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]);\n  };\n\n  const onRemove = (targetId) => {\n    const newDiaryList = data.filter((it) => it.id !== targetId);\n    setData(newDiaryList);\n  };\n\n  const onEdit = (targetId, newSummary) => {\n    setData(\n      data.map((it) =>\n        it.id === targetId ? { ...it, summary: newSummary } : it\n      )\n    );\n  };\n\n  return (\n    <div className=\"Data\">\n      {/* <PostWrite onCreate={onCreate} /> */}\n      <Table onEdit={onEdit} onRemove={onRemove} diaryList={data} /> \n    </div>\n  );\n};\nexport default PostWrite;\n"],"mappingsiBC,QAAjB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;EAEA,MAAMK,MAAM,GAAGN,MAAM,CAAC,CAAD,CAArB;;EAEA,MAAMO,QAAQ,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;IACpC,MAAMC,YAAY,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAArB;IACA,MAAMC,OAAO,GAAG;MACdL,MADc;MAEdC,OAFc;MAGdC,YAHc;MAIdI,EAAE,EAAER,MAAM,CAACS;IAJG,CAAhB;IAMAT,MAAM,CAACS,OAAP,IAAkB,CAAlB;IACAV,OAAO,CAAC,CAACQ,OAAD,EAAU,GAAGT,IAAb,CAAD,CAAP;EACD,CAVD;;EAYA,MAAMY,QAAQ,GAAIC,QAAD,IAAc;IAC7B,MAAMC,YAAY,GAAGd,IAAI,CAACe,MAAL,CAAaC,EAAD,IAAQA,EAAE,CAACN,EAAH,KAAUG,QAA9B,CAArB;IACAZ,OAAO,CAACa,YAAD,CAAP;EACD,CAHD;;EAKA,MAAMG,MAAM,GAAG,CAACJ,QAAD,EAAWK,UAAX,KAA0B;IACvCjB,OAAO,CACLD,IAAI,CAACmB,GAAL,CAAUH,EAAD,IACPA,EAAE,CAACN,EAAH,KAAUG,QAAV,GAAqB,EAAE,GAAGG,EAAL;MAASX,OAAO,EAAEa;IAAlB,CAArB,GAAsDF,EADxD,CADK,CAAP;EAKD,CAND;;EAQA,oBACE;IAAK,SAAS,EAAC,MAAf;IAAA,uBAEE,QAAC,KAAD;MAAO,MAAM,EAAEC,MAAf;MAAuB,QAAQ,EAAEL,QAAjC;MAA2C,SAAS,EAAEZ;IAAtD;MAAA;MAAA;MAAA;IAAA;EAFF;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CApCD;;GAAMD,S;;KAAAA,S;AAqCN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}