{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst initialState = {\n  list: []\n}; // 게시글 하나에는 어떤 정보가 있어야 하는 지 하나 만들어둡시다! :)\n\nconst initialPost = {\n  user_info: {\n    id: 0,\n    user_name: \"mean0\",\n    user_profile: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\"\n  },\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"고양이네요!\",\n  comment_cnt: 10,\n  insert_dt: \"2021-02-27 10:00:00\"\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        // 잘 가져왔나 확인하기! :)\n        // 앗! DB에서 가져온 것하고 우리가 Post 컴포넌트에서 쓰는 데이터 모양새가 다르네요!\n        // console.log(doc.id, doc.data());\n        // 데이터 모양을 맞춰주자!\n        let _post = doc.data();\n\n        let post = {\n          id: doc.id,\n          user_info: {\n            user_name: _post.user_name,\n            user_profile: _post.user_profile,\n            user_id: _post.user_id\n          },\n          contents: _post.contents,\n          image_url: _post.image_url,\n          comment_cnt: _post.comment_cnt,\n          imsert_dt: _post.insert_dt\n        };\n        post_list.push(post);\n      }); // 리스트 확인하기!\n\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {}),\n  [ADD_POST]: (state, action) => produce(state, draft => {})\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/eunji/Desktop/은지/sparta/react_middleage/image-community/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","firestore","SET_POST","ADD_POST","setPost","post_list","addPost","post","initialState","list","initialPost","user_info","id","user_name","user_profile","image_url","contents","comment_cnt","insert_dt","getPostFB","dispatch","getState","history","postDB","collection","get","then","docs","forEach","doc","_post","data","user_id","imsert_dt","push","console","log","state","action","draft","actionCreators"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,OAAO,GAAGN,YAAY,CAACI,QAAD,EAAYG,SAAD,KAAgB;AAACA,EAAAA;AAAD,CAAhB,CAAX,CAA5B;AACA,MAAMC,OAAO,GAAGR,YAAY,CAACK,QAAD,EAAYI,IAAD,KAAW;AAACA,EAAAA;AAAD,CAAX,CAAX,CAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB,C,CAIA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,SAAS,EAAE;AACXC,IAAAA,EAAE,EAAE,CADO;AAETC,IAAAA,SAAS,EAAE,OAFF;AAGTC,IAAAA,YAAY,EAAE;AAHL,GADO;AAMlBC,EAAAA,SAAS,EAAE,4DANO;AAOlBC,EAAAA,QAAQ,EAAE,QAPQ;AAQlBC,EAAAA,WAAW,EAAE,EARK;AASlBC,EAAAA,SAAS,EAAE;AATO,CAApB;;AAYA,MAAMC,SAAS,GAAG,MAAM;AACtB,SAAO,UAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAAEC,IAAAA;AAAF,GAA9B,EAA2C;AAChD,UAAMC,MAAM,GAAGtB,SAAS,CAACuB,UAAV,CAAqB,MAArB,CAAf;AAEAD,IAAAA,MAAM,CAACE,GAAP,GAAaC,IAAb,CAAmBC,IAAD,IAAU;AAC1B,UAAItB,SAAS,GAAG,EAAhB;AAEAsB,MAAAA,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAS;AACpB;AACA;AACA;AAEA;AACA,YAAIC,KAAK,GAAGD,GAAG,CAACE,IAAJ,EAAZ;;AACA,YAAIxB,IAAI,GAAG;AACPK,UAAAA,EAAE,EAAEiB,GAAG,CAACjB,EADD;AAEPD,UAAAA,SAAS,EAAE;AACPE,YAAAA,SAAS,EAAEiB,KAAK,CAACjB,SADV;AAEPC,YAAAA,YAAY,EAAEgB,KAAK,CAAChB,YAFb;AAGPkB,YAAAA,OAAO,EAAEF,KAAK,CAACE;AAHR,WAFJ;AAOPhB,UAAAA,QAAQ,EAAEc,KAAK,CAACd,QAPT;AAQPD,UAAAA,SAAS,EAAEe,KAAK,CAACf,SARV;AASPE,UAAAA,WAAW,EAAEa,KAAK,CAACb,WATZ;AAUPgB,UAAAA,SAAS,EAAEH,KAAK,CAACZ;AAVV,SAAX;AAaAb,QAAAA,SAAS,CAAC6B,IAAV,CAAe3B,IAAf;AACD,OArBD,EAH0B,CA0B1B;;AACA4B,MAAAA,OAAO,CAACC,GAAR,CAAY/B,SAAZ;AAEAe,MAAAA,QAAQ,CAAChB,OAAO,CAACC,SAAD,CAAR,CAAR;AACD,KA9BD;AA+BD,GAlCD;AAmCD,CApCD,C,CAsCA;;;AACA,eAAeN,aAAa,CACxB;AACI,GAACG,QAAD,GAAY,CAACmC,KAAD,EAAQC,MAAR,KAAmBtC,OAAO,CAACqC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC,CAD1C;AAKI,GAACpC,QAAD,GAAY,CAACkC,KAAD,EAAQC,MAAR,KAAmBtC,OAAO,CAACqC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC;AAL1C,CADwB,EAUxB/B,YAVwB,CAA5B,C,CAaE;;AACF,MAAMgC,cAAc,GAAG;AACnBpC,EAAAA,OADmB;AAEnBE,EAAAA;AAFmB,CAAvB;AAKE,SAASkC,cAAT","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\n\nimport { firestore } from \"../../shared/firebase\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\n\nconst initialState = {\n    list: [],\n}\n\n// 게시글 하나에는 어떤 정보가 있어야 하는 지 하나 만들어둡시다! :)\nconst initialPost = {\n  user_info: {\n\t\tid: 0,\n    user_name: \"mean0\",\n    user_profile: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  },\n  image_url: \"https://mean0images.s3.ap-northeast-2.amazonaws.com/4.jpeg\",\n  contents: \"고양이네요!\",\n  comment_cnt: 10,\n  insert_dt: \"2021-02-27 10:00:00\",\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    postDB.get().then((docs) => {\n      let post_list = [];\n\n      docs.forEach((doc) => {\n        // 잘 가져왔나 확인하기! :)\n        // 앗! DB에서 가져온 것하고 우리가 Post 컴포넌트에서 쓰는 데이터 모양새가 다르네요!\n        // console.log(doc.id, doc.data());\n\n        // 데이터 모양을 맞춰주자!\n        let _post = doc.data();\n        let post = {\n            id: doc.id,\n            user_info: {\n                user_name: _post.user_name,\n                user_profile: _post.user_profile,\n                user_id: _post.user_id,\n            },\n            contents: _post.contents,\n            image_url: _post.image_url,\n            comment_cnt: _post.comment_cnt,\n            imsert_dt: _post.insert_dt\n        }\n\n        post_list.push(post);\n      });\n\n      // 리스트 확인하기!\n      console.log(post_list);\n\n      dispatch(setPost(post_list));\n    });\n  };\n};\n\n// reducer\nexport default handleActions(\n    {\n        [SET_POST]: (state, action) => produce(state, (draft) => {\n          \n        }),\n  \n        [ADD_POST]: (state, action) => produce(state, (draft) => {\n            \n        })\n    },\n    initialState\n  );\n\n  // action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n  };\n  \n  export { actionCreators };"]},"metadata":{},"sourceType":"module"}