{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\nimport { firestore } from \"../../shared/firebase\";\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst initialState = {\n  list: []\n}; // 게시글 하나에는 어떤 정보가 있어야 하는 지 예시 하나 만들어두기\n\nconst initialPost = {\n  // user_info: {\n  // \tid: 0,\n  //   user_name: \"mean0\",\n  //   user_profile: \"hhttps://cdn.mkhealth.co.kr/news/photo/202004/img_MKH200424005_0.jpg\",\n  // },\n  // image_url: \"https://cdn.mkhealth.co.kr/news/photo/202004/img_MKH200424005_0.jpg\",\n  url: \"https://blog.naver.com/resumake/222603947125\",\n  contents: \"면접준비\",\n  // comment_cnt: 10,\n  insert_dt: \"2022-05-29 10:00:00\"\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    const postDB = firestore.collection(\"post\");\n    postDB.get().then(docs => {\n      let post_list = [];\n      docs.forEach(doc => {\n        // 잘 가져왔나 확인하기! :)\n        // 앗! DB에서 가져온 것하고 우리가 Post 컴포넌트에서 쓰는 데이터 모양새가 다르네요!\n        // console.log(doc.id, doc.data());\n        // 데이터 모양을 맞춰주자!\n        let _post = doc.data();\n\n        let post = {\n          id: doc.id,\n          // user_info: {\n          //     user_name: _post.user_name,\n          //     user_profile: _post.user_profile,\n          //     user_id: _post.user_id,\n          // },\n          contents: _post.contents,\n          image_url: _post.image_url,\n          comment_cnt: _post.comment_cnt,\n          imsert_dt: _post.insert_dt\n        };\n        post_list.push(post);\n      }); // 리스트 확인하기!\n\n      console.log(post_list);\n      dispatch(setPost(post_list));\n    });\n  };\n}; // reducer\n\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {}),\n  [ADD_POST]: (state, action) => produce(state, draft => {})\n}, initialState); // action creator export\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB\n};\nexport { actionCreators };","map":{"version":3,"names":["createAction","handleActions","produce","firestore","SET_POST","ADD_POST","setPost","post_list","addPost","post","initialState","list","initialPost","url","contents","insert_dt","getPostFB","dispatch","getState","history","postDB","collection","get","then","docs","forEach","doc","_post","data","id","image_url","comment_cnt","imsert_dt","push","console","log","state","action","draft","actionCreators"],"sources":["/Users/eunji/Desktop/은지/Test2/test2/src/redux/modules/post.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { produce } from \"immer\";\n\nimport { firestore } from \"../../shared/firebase\";\n\nconst SET_POST = \"SET_POST\";\nconst ADD_POST = \"ADD_POST\";\n\nconst setPost = createAction(SET_POST, (post_list) => ({post_list}));\nconst addPost = createAction(ADD_POST, (post) => ({post}));\n\nconst initialState = {\n    list: [],\n}\n\n// 게시글 하나에는 어떤 정보가 있어야 하는 지 예시 하나 만들어두기\nconst initialPost = {\n  // user_info: {\n\t// \tid: 0,\n  //   user_name: \"mean0\",\n  //   user_profile: \"hhttps://cdn.mkhealth.co.kr/news/photo/202004/img_MKH200424005_0.jpg\",\n  // },\n  // image_url: \"https://cdn.mkhealth.co.kr/news/photo/202004/img_MKH200424005_0.jpg\",\n  url: \"https://blog.naver.com/resumake/222603947125\",\n  contents: \"면접준비\",\n  // comment_cnt: 10,\n  insert_dt: \"2022-05-29 10:00:00\",\n};\n\nconst getPostFB = () => {\n  return function (dispatch, getState, { history }) {\n    const postDB = firestore.collection(\"post\");\n\n    postDB.get().then((docs) => {\n      let post_list = [];\n\n      docs.forEach((doc) => {\n        // 잘 가져왔나 확인하기! :)\n        // 앗! DB에서 가져온 것하고 우리가 Post 컴포넌트에서 쓰는 데이터 모양새가 다르네요!\n        // console.log(doc.id, doc.data());\n\n        // 데이터 모양을 맞춰주자!\n        let _post = doc.data();\n        let post = {\n            id: doc.id,\n            // user_info: {\n            //     user_name: _post.user_name,\n            //     user_profile: _post.user_profile,\n            //     user_id: _post.user_id,\n            // },\n            contents: _post.contents,\n            image_url: _post.image_url,\n            comment_cnt: _post.comment_cnt,\n            imsert_dt: _post.insert_dt\n        }\n\n        post_list.push(post);\n      });\n\n      // 리스트 확인하기!\n      console.log(post_list);\n\n      dispatch(setPost(post_list));\n    });\n  };\n};\n\n// reducer\nexport default handleActions(\n    {\n        [SET_POST]: (state, action) => produce(state, (draft) => {\n          \n        }),\n  \n        [ADD_POST]: (state, action) => produce(state, (draft) => {\n            \n        })\n    },\n    initialState\n  );\n\n  // action creator export\nconst actionCreators = {\n    setPost,\n    addPost,\n    getPostFB,\n  };\n  \n  export { actionCreators };"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,MAAMC,OAAO,GAAGN,YAAY,CAACI,QAAD,EAAYG,SAAD,KAAgB;EAACA;AAAD,CAAhB,CAAX,CAA5B;AACA,MAAMC,OAAO,GAAGR,YAAY,CAACK,QAAD,EAAYI,IAAD,KAAW;EAACA;AAAD,CAAX,CAAX,CAA5B;AAEA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE;AADW,CAArB,C,CAIA;;AACA,MAAMC,WAAW,GAAG;EAClB;EACD;EACC;EACA;EACA;EACA;EACAC,GAAG,EAAE,8CAPa;EAQlBC,QAAQ,EAAE,MARQ;EASlB;EACAC,SAAS,EAAE;AAVO,CAApB;;AAaA,MAAMC,SAAS,GAAG,MAAM;EACtB,OAAO,UAAUC,QAAV,EAAoBC,QAApB,QAA2C;IAAA,IAAb;MAAEC;IAAF,CAAa;IAChD,MAAMC,MAAM,GAAGjB,SAAS,CAACkB,UAAV,CAAqB,MAArB,CAAf;IAEAD,MAAM,CAACE,GAAP,GAAaC,IAAb,CAAmBC,IAAD,IAAU;MAC1B,IAAIjB,SAAS,GAAG,EAAhB;MAEAiB,IAAI,CAACC,OAAL,CAAcC,GAAD,IAAS;QACpB;QACA;QACA;QAEA;QACA,IAAIC,KAAK,GAAGD,GAAG,CAACE,IAAJ,EAAZ;;QACA,IAAInB,IAAI,GAAG;UACPoB,EAAE,EAAEH,GAAG,CAACG,EADD;UAEP;UACA;UACA;UACA;UACA;UACAf,QAAQ,EAAEa,KAAK,CAACb,QAPT;UAQPgB,SAAS,EAAEH,KAAK,CAACG,SARV;UASPC,WAAW,EAAEJ,KAAK,CAACI,WATZ;UAUPC,SAAS,EAAEL,KAAK,CAACZ;QAVV,CAAX;QAaAR,SAAS,CAAC0B,IAAV,CAAexB,IAAf;MACD,CArBD,EAH0B,CA0B1B;;MACAyB,OAAO,CAACC,GAAR,CAAY5B,SAAZ;MAEAU,QAAQ,CAACX,OAAO,CAACC,SAAD,CAAR,CAAR;IACD,CA9BD;EA+BD,CAlCD;AAmCD,CApCD,C,CAsCA;;;AACA,eAAeN,aAAa,CACxB;EACI,CAACG,QAAD,GAAY,CAACgC,KAAD,EAAQC,MAAR,KAAmBnC,OAAO,CAACkC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC,CAD1C;EAKI,CAACjC,QAAD,GAAY,CAAC+B,KAAD,EAAQC,MAAR,KAAmBnC,OAAO,CAACkC,KAAD,EAASE,KAAD,IAAW,CAExD,CAFqC;AAL1C,CADwB,EAUxB5B,YAVwB,CAA5B,C,CAaE;;AACF,MAAM6B,cAAc,GAAG;EACnBjC,OADmB;EAEnBE,OAFmB;EAGnBQ;AAHmB,CAAvB;AAME,SAASuB,cAAT"},"metadata":{},"sourceType":"module"}